---
import {
  glslCategoryDetail,
  imageProcessingCategoryDetail,
  noteCategoryDetail,
  webglCategoryDetail
} from "@/content/config"
import BaseHtml from "@/layout/base-html.astro"
import { getCollection } from "astro:content"

const studyPages = await getCollection("study")
const notePages = await getCollection("note")

const slugs = [...studyPages.map((page) => page.slug)] as const
type Slug = (typeof slugs)[number]

const noteSlugs = [...notePages.map((page) => page.slug)] as const
type NoteSlug = (typeof noteSlugs)[number]

const order: Slug[] = [
  "white-triangle", // https://wgld.org/d/webgl/w014.html
  "rainbow-triangle", // https://wgld.org/d/webgl/w015.html
  "multiple-triangle", // https://wgld.org/d/webgl/w016.html
  "rainbow-torus", // https://wgld.org/d/webgl/w020.html
  "directional-light-torus", // https://wgld.org/d/webgl/w021.html
  "ambient-light-torus", // https://wgld.org/d/webgl/w022.html
  "specular-light-torus", // https://wgld.org/d/webgl/w023.html
  "point-light-torus-and-ball", // https://wgld.org/d/webgl/w025.html
  "goraud-lambert-sphere", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch03/ch03_01_goraud-lambert.html
  "goraud-phong-sphere", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch03/ch03_03_goraud-phong.html
  "phong-phong-sphere", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch03/ch03_04_sphere-phong.html
  "point-light-cone-and-sphere-on-plane", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch03/ch03_07_positional-lighting.html
  "workbench-compare-coloring-cube", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch06/ch06_01_cube.html
  "workbench-wall-multiple-lights", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch06/ch06_05_wall-light-arrays-final.html
  "workbench-wall-multiple-spot-light-proportional", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch06/ch06_07_wall-spot-light-proportional.html
  "workbench-wall-multiple-spot-light-exponential", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch06/ch06_08_wall-spot-light-exponential.html
  "torus-rotation-by-mouse", // https://wgld.org/d/webgl/w033.html
  "torus-camera-rotation", // https://wgld.org/d/webgl/w032.html
  "visualization-matrix-translate-cone", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch04/ch04_01_model-view-translation.html
  "visualization-matrix-rotate-cone", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch04/ch04_02_model-view-rotation.html
  "switch-camera-type-tranform-cone", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch04/ch04_04_camera-types.html
  "texture-square", // https://wgld.org/d/webgl/w026.html
  "multi-texture-square", // https://wgld.org/d/webgl/w027.html
  "workbench-texture-cube", // https://github.com/PacktPublishing/Real-Time-3D-Graphics-with-WebGL-2/blob/master/ch07/ch07_02_textured-cube-final.html
  "offscreen-texture-cube", // https://wgld.org/d/webgl/w040.html
  "circular-lined-multi-torus", // https://wgld.org/d/webgl/w053.html
  "grayscale-circular-lined-torus", // https://wgld.org/d/webgl/w053.html
  "sepia-circular-lined-torus", // https://wgld.org/d/webgl/w054.html
  "first-derivative-filter-circular-lined-torus", // https://wgld.org/d/webgl/w055.html
  "laplacian-filter-circular-lined-torus", // https://wgld.org/d/webgl/w056.html
  "compare-blend-effect-image", // original
  "first-derivative-filter-image", // original
  "laplacian-filter-image", // original
  "gaussian-blur-image", // original
  "render-full-screen-trinangle-in-wegbl2", // contents
  "solid-bg", // https://www.shadertoy.com/view/NdySRV
  "resolution-gradient-bg", // https://www.shadertoy.com/view/7sGXzK
  "norm-lerp-map", // contents
  "lerp-2color-bg", // https://www.shadertoy.com/view/NdySR3
  "lerp-3color-bg", // https://www.shadertoy.com/view/fdGXR3
  "bilerp-4color-bg", // https://www.shadertoy.com/view/NsKSDG
  "step-posterization-bg", // https://www.shadertoy.com/view/fsVXWG
  "smooth-step-posterization-bg",
  "polar-gradient-bg", // https://www.shadertoy.com/view/fdKSDG
  "polar-dot-gradient-bg", // https://www.shadertoy.com/view/NdKSDG
  "hsv-color-space-bg", // https://www.shadertoy.com/view/fdVSDG
  "legacy-hash-1d-bg", // https://www.shadertoy.com/view/NsfcDM
  "legacy-hash-2d-bg",
  "hash-1d-bg", // https://www.shadertoy.com/view/NdXyW7
  "hash-in2d-out2d-bg", // https://www.shadertoy.com/view/fsXyW7
  "hash-in2d-out1d-bg",
  "hash-in3d-out3d-bg",
  "hash-in3d-out1d-bg",
  "value-noise-2to1-bilerp-only-bg", // https://thebookofshaders.com/11/?lan=jp , https://www.shadertoy.com/view/NsXyW7
  "value-noise-2to1-bg",
  "value-noise-3to1-bg",
  "plot-linear-func", // https://thebookofshaders.com/05/?lan=jp
  "plot-pow-func",
  "plot-step-func",
  "plot-smoothstep-func",
  "plot-multiple-func-colorful", // https://thebookofshaders.com/06/?lan=jp,
  "shader-side-of-square", // https://thebookofshaders.com/07/?lan=jp
  "circle-outline-by-glsl-length",
  "circle-outline-by-glsl-dot",
  "orb-by-pow", // https://wgld.org/d/glsl/g003.html
  "orb-by-division",
  "sdf-circle-bg", // https://www.shadertoy.com/view/NlXczr
  "draw-circle-glsl", // https://thebookofshaders.com/edit.php#07/circle.frag
  "sdf-rect-bg", // https://www.shadertoy.com/view/ftfczr
  "sdf-rect-fill", // https://thebookofshaders.com/07/
  "sdf-rect-outline",
  "draw-rect-glsl", // https://thebookofshaders.com/edit.php
  "draw-round-rect-glsl",
  "draw-cross-mark-glsl", // https://thebookofshaders.com/edit.php#07/cross.frag
  "sdf-circle-manhattan-distance", // original
  "sdf-circle-chebyshev-distance",
  "sdf-circle-lp-norm",
  "sdf-segment", // https://iquilezles.org/articles/distfunctions2d/
  "sdf-segment-fill", // https://thebookofshaders.com/07/
  "sdf-segment-outline",
  "draw-line-glsl", // https://thebookofshaders.com/edit.php#07/line.frag
  "fract-x-repeat-gradation", // https://zenn.dev/baroqueengine/books/a19140f2d9fc1a/viewer/0a3941
  "fract-xy-repeat-gradation",
  "x-repeat-circle", // https://zenn.dev/baroqueengine/books/a19140f2d9fc1a/viewer/3e2493
  "xy-repeat-circle",
  "xy-repeat-circle-gt-distance-gt", // https://zenn.dev/baroqueengine/books/a19140f2d9fc1a/viewer/2c560f
  "xy-repeat-circle-gt-distance-smaller",
  "xy-repeat-circle-gt-mouse-distance-gt",
  "xy-repeat-circle-gt-mouse-distance-smaller",
  "section-paper-bg", // https://thebookofshaders.com/edit.php#10/ikeda-simple-grid.frag
  "translate-cross-mark", // https://thebookofshaders.com/08/?lan=jp
  "rotate-cross-mark",
  "scale-cross-mark",
  "afterimage-circle-on-mouse" // original
]

const noteOrder: NoteSlug[] = [
  // math
  "vector",
  "matrix",
  "quaternion",
  "coordinate-system",
  "coordinate-space",
  // CG
  "light-and-object",
  "texture",
  "mesh",
  "lighting",
  // image-processing
  "mix-blend-mode"
]

const orderedStudyPages = order.map((slug) => studyPages.find((page) => page.slug === slug)!!)
const orderedNotePages = noteOrder.map((slug) => notePages.find((page) => page.slug === slug)!!)

const webglStudyPages = orderedStudyPages.filter((page) => page.data.category === "webgl")
const glslStudyPages = orderedStudyPages.filter((page) => page.data.category === "glsl")
const imageProcessingStudyPages = orderedStudyPages.filter((page) => page.data.category === "image-processing")
---

<BaseHtml title="WebGL Study Demo">
  <h2>GLSL</h2>
  {
    Object.entries(glslCategoryDetail).map(([ckey, cdetail]) => {
      const pages = glslStudyPages.filter((page) => page.data.subcategory === ckey)
      if (pages.length < 1) return null
      return (
        <>
          <h3>{cdetail.title}</h3>
          <ul>
            {pages.map((page) => (
              <li>
                <a href={`/webgl-practice-ground/${page.slug}`}>{page.data.title}</a>
              </li>
            ))}
          </ul>
        </>
      )
    })
  }
  <h2>WebGL</h2>
  {
    Object.entries(webglCategoryDetail).map(([ckey, cdetail]) => {
      const pages = webglStudyPages.filter((page) => page.data.subcategory === ckey)
      if (pages.length < 1) return null
      return (
        <>
          <h3>{cdetail.title}</h3>
          <ul>
            {pages.map((page) => (
              <li>
                <a href={`/webgl-practice-ground/${page.slug}`}>{page.data.title}</a>
              </li>
            ))}
          </ul>
        </>
      )
    })
  }
  <h2>画像処理</h2>
  {
    Object.entries(imageProcessingCategoryDetail).map(([ckey, cdetail]) => {
      const pages = imageProcessingStudyPages.filter((page) => page.data.subcategory === ckey)
      if (pages.length < 1) return null
      return (
        <>
          <h3>{cdetail.title}</h3>
          <ul>
            {pages.map((page) => (
              <li>
                <a href={`/webgl-practice-ground/${page.slug}`}>{page.data.title}</a>
              </li>
            ))}
          </ul>
        </>
      )
    })
  }
  <h2>Note</h2>
  {
    Object.entries(noteCategoryDetail).map(([ckey, cdetail]) => {
      const pages = orderedNotePages.filter((page) => page.data.category === ckey)
      if (pages.length < 1) return null
      return (
        <>
          <h3>{cdetail.title}</h3>
          <ul>
            {pages.map((page) => (
              <li>
                <a href={`/webgl-practice-ground/note/${page.slug}`}>{page.data.title}</a>
              </li>
            ))}
          </ul>
        </>
      )
    })
  }
</BaseHtml>

<style>
  body {
    overflow-y: auto;
    line-height: 2;
  }
</style>
