<canvas id="gl-canvas"></canvas>

<style>
  canvas {
    width: 100vw;
    height: 100vh;
  }
</style>

<script>
  import { Space } from "@/lib/canvas/index"
  import { Program } from "@/lib/webgl/program"
  import vertexSource from "./index.vert?raw"
  import fragmentSource from "./index.frag?raw"
  import type { Attribute, Uniform } from "@/lib/webgl/shader-data.type"
  import { UniformReflect } from "@/lib/webgl/uniform-reflect"

  window.onload = () => {
    const space = new Space("gl-canvas")
    const canvas = space.canvas
    const gl = space.gl
    if (!canvas || !gl) return

    let reflect: UniformReflect

    const configure = () => {
      space.autoResize(() => space.fitScreen())

      // canvasを初期化する色を設定する
      gl.clearColor(0.0, 0.0, 0.0, 1.0)
      // canvasを初期化する際の深度を設定する
      gl.clearDepth(1.0)

      const program = new Program(gl, vertexSource, fragmentSource)

      const attributes: Attribute[] = []
      const uniforms: Uniform[] = ["uResolution"]

      program.load(attributes, uniforms)

      reflect = new UniformReflect(gl, program)
    }

    const draw = () => {
      // canvasを初期化
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

      reflect.resolution()

      gl.drawArrays(gl.TRIANGLE_FAN, 0, 3)
    }

    const init = () => {
      configure()
      draw()
    }

    init()
  }
</script>
