---
import CodeBlock from "./code-block.astro"
import { Icon } from "astro-icon"

interface Props {
  glSrc?: string
  vertSrc?: string
  fragSrc?: string
  shaders?: { vert: { title: string; src: string }; frag: { title: string; src: string } }[]
  canvasSize: "js-fit" | "full-screen" | "full-square" | "full-horizontal" | [number, number]
}

const { fragSrc, canvasSize, vertSrc, glSrc, shaders } = Astro.props
---

<div class="container">
  {
    typeof canvasSize === "string" ? (
      <canvas id="gl-canvas" class={canvasSize} />
    ) : (
      <canvas id="gl-canvas" width={canvasSize[0]} height={canvasSize[1]} />
    )
  }
  <button id="ToggleCanvasOrSrc" class="ToggleCanvasOrSrc">
    <Icon name="vuesax-linear-code-1" class="ToCodeIcon" />
    <Icon name="vuesax-linear-image" class="ToCanvasIcon" />
  </button>
  <div class="CodeBlockContainer" id="CodeBlockContainer">
    {vertSrc && <CodeBlock title="index.vert" src={vertSrc} lang="glsl" bgcolor="rgba(181, 241, 204, 0.3)" />}
    {fragSrc && <CodeBlock title="index.frag" src={fragSrc} lang="glsl" bgcolor="rgba(180, 228, 255, 0.3)" />}
    {
      shaders &&
        shaders.map(({ vert, frag }) => {
          return (
            <>
              <CodeBlock title={vert.title} src={vert.src} lang="glsl" bgcolor="rgba(181, 241, 204, 0.3)" />
              <CodeBlock title={frag.title} src={frag.src} lang="glsl" bgcolor="rgba(180, 228, 255, 0.3)" />
            </>
          )
        })
    }
    {glSrc && <CodeBlock title="render.ts" src={glSrc} lang="ts" bgcolor="rgba(247, 200, 224, 0.3)" />}
  </div>
</div>

<script>
  const $button = document.getElementById("ToggleCanvasOrSrc")!
  const $canvas = document.getElementById("gl-canvas")!
  const $code = document.getElementById("CodeBlockContainer")!

  $button.addEventListener("click", () => {
    $canvas.classList.toggle("--deactive")
    $code.classList.toggle("--active")
    $button.classList.toggle("--active-code")
  })
</script>

<style>
  .container {
    display: flex;
    flex-direction: column;
    padding: 0;
    gap: 2em;
  }

  .CodeBlockContainer {
    display: none;
  }

  .CodeBlockContainer.--active {
    display: flex;
    flex-direction: column;
    padding: 4em 0;
    gap: 2em;
  }

  .--deactive {
    display: none;
  }

  .ToggleCanvasOrSrc {
    position: fixed;
    bottom: 0.5rem;
    left: 0.5rem;

    display: grid;
    place-items: center;

    appearance: none;
    border: none;
    padding: 0;

    background-color: #97b7e9;
    color: #354259;

    width: 2.5rem;
    height: 2.5rem;
    aspect-ratio: 1;

    border-radius: 50%;
  }

  :global([astro-icon]) {
    width: 1.5rem;
    height: 1.5rem;
  }

  .ToCanvasIcon {
    display: none;
  }

  .ToCodeIcon {
    display: block;
  }

  .--active-code .ToCanvasIcon {
    display: block;
  }

  .--active-code .ToCodeIcon {
    display: none;
  }

  canvas {
    align-self: center;
    user-select: none;
  }

  canvas:focus {
    outline: none;
  }

  @media (orientation: landscape) {
    .js-fit {
      max-height: 100svh;
    }
  }

  @media (orientation: portrait) {
    .js-fit {
      max-height: 100vw;
    }
  }

  .full-screen {
    width: 100vw;
    height: 100svh;
  }

  .full-square {
    width: 100vw;
    height: 100vw;
  }

  @media (orientation: landscape) {
    .full-square {
      width: 100svh;
      height: 100svh;
    }
  }

  .full-horizontal {
    width: 100vw;
    height: 100svh;
  }

  @media (orientation: portrait) {
    .full-horizontal {
      width: 100vw;
      height: 100vw;
      position: absolute;
      top: 50%;
      translate: 0 -50%;
    }

    :global(body:has(.full-horizontal)) {
      overflow: hidden;
    }

    :global(body:has(.full-horizontal.--deactive)) {
      overflow-y: auto;
    }
  }
</style>
